# Python stubs generated by omniidl from netopp.idl

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA

_omnipy.checkVersion(3,0, __file__)


#
# Start of module "NetOpp"
#
__name__ = "NetOpp"
_0_NetOpp = omniORB.openModule("NetOpp", r"netopp.idl")
_0_NetOpp__POA = omniORB.openModule("NetOpp__POA", r"netopp.idl")


# typedef ... StringArray
class StringArray:
    _NP_RepositoryId = "IDL:NetOpp/StringArray:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_NetOpp.StringArray = StringArray
_0_NetOpp._d_StringArray  = (omniORB.tcInternal.tv_sequence, (omniORB.tcInternal.tv_string,0), 0)
_0_NetOpp._ad_StringArray = (omniORB.tcInternal.tv_alias, StringArray._NP_RepositoryId, "StringArray", (omniORB.tcInternal.tv_sequence, (omniORB.tcInternal.tv_string,0), 0))
_0_NetOpp._tc_StringArray = omniORB.tcInternal.createTypeCode(_0_NetOpp._ad_StringArray)
omniORB.registerType(StringArray._NP_RepositoryId, _0_NetOpp._ad_StringArray, _0_NetOpp._tc_StringArray)
del StringArray

# interface NetOppServer
_0_NetOpp._d_NetOppServer = (omniORB.tcInternal.tv_objref, "IDL:NetOpp/NetOppServer:1.0", "NetOppServer")
omniORB.typeMapping["IDL:NetOpp/NetOppServer:1.0"] = _0_NetOpp._d_NetOppServer
_0_NetOpp.NetOppServer = omniORB.newEmptyClass()
class NetOppServer :
    _NP_RepositoryId = _0_NetOpp._d_NetOppServer[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_NetOpp.NetOppServer = NetOppServer
_0_NetOpp._tc_NetOppServer = omniORB.tcInternal.createTypeCode(_0_NetOpp._d_NetOppServer)
omniORB.registerType(NetOppServer._NP_RepositoryId, _0_NetOpp._d_NetOppServer, _0_NetOpp._tc_NetOppServer)

# NetOppServer operations and attributes
NetOppServer._d_startNetwork = ((), (omniORB.tcInternal.tv_boolean, ), None)
NetOppServer._d_stopNetwork = ((), (omniORB.tcInternal.tv_boolean, ), None)
NetOppServer._d_addFile = (((omniORB.tcInternal.tv_string,0), ), (omniORB.tcInternal.tv_boolean, ), None)
NetOppServer._d_delFile = (((omniORB.tcInternal.tv_string,0), ), (omniORB.tcInternal.tv_boolean, ), None)
NetOppServer._d_clientList = ((), (omniORB.typeMapping["IDL:NetOpp/StringArray:1.0"], ), None)
NetOppServer._d_fileList = ((), (omniORB.typeMapping["IDL:NetOpp/StringArray:1.0"], ), None)

# NetOppServer object reference
class _objref_NetOppServer (CORBA.Object):
    _NP_RepositoryId = NetOppServer._NP_RepositoryId

    def __init__(self):
        CORBA.Object.__init__(self)

    def startNetwork(self, *args):
        return _omnipy.invoke(self, "startNetwork", _0_NetOpp.NetOppServer._d_startNetwork, args)

    def stopNetwork(self, *args):
        return _omnipy.invoke(self, "stopNetwork", _0_NetOpp.NetOppServer._d_stopNetwork, args)

    def addFile(self, *args):
        return _omnipy.invoke(self, "addFile", _0_NetOpp.NetOppServer._d_addFile, args)

    def delFile(self, *args):
        return _omnipy.invoke(self, "delFile", _0_NetOpp.NetOppServer._d_delFile, args)

    def clientList(self, *args):
        return _omnipy.invoke(self, "clientList", _0_NetOpp.NetOppServer._d_clientList, args)

    def fileList(self, *args):
        return _omnipy.invoke(self, "fileList", _0_NetOpp.NetOppServer._d_fileList, args)

    __methods__ = ["startNetwork", "stopNetwork", "addFile", "delFile", "clientList", "fileList"] + CORBA.Object.__methods__

omniORB.registerObjref(NetOppServer._NP_RepositoryId, _objref_NetOppServer)
_0_NetOpp._objref_NetOppServer = _objref_NetOppServer
del NetOppServer, _objref_NetOppServer

# NetOppServer skeleton
__name__ = "NetOpp__POA"
class NetOppServer (PortableServer.Servant):
    _NP_RepositoryId = _0_NetOpp.NetOppServer._NP_RepositoryId


    _omni_op_d = {"startNetwork": _0_NetOpp.NetOppServer._d_startNetwork, "stopNetwork": _0_NetOpp.NetOppServer._d_stopNetwork, "addFile": _0_NetOpp.NetOppServer._d_addFile, "delFile": _0_NetOpp.NetOppServer._d_delFile, "clientList": _0_NetOpp.NetOppServer._d_clientList, "fileList": _0_NetOpp.NetOppServer._d_fileList}

NetOppServer._omni_skeleton = NetOppServer
_0_NetOpp__POA.NetOppServer = NetOppServer
omniORB.registerSkeleton(NetOppServer._NP_RepositoryId, NetOppServer)
del NetOppServer
__name__ = "NetOpp"

#
# End of module "NetOpp"
#
__name__ = "netopp_idl"

_exported_modules = ( "NetOpp", )

# The end.
